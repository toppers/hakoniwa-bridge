cmake_minimum_required(VERSION 3.15)

project(VirtualProject LANGUAGES CXX)

if(WIN32)
    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
    set(CMAKE_CXX_EXTENSIONS OFF)
    set(THIRD_PARTY_PATH "${CMAKE_SOURCE_DIR}/../third-party")
    set(HAKO_INC_DIR "${CMAKE_SOURCE_DIR}/../third-party/local/include/hakoniwa")
    set(ZENOH_INC_DIR "${CMAKE_SOURCE_DIR}/../third-party/local/include/zenoh-c")
    set(CMAKE_FIND_ROOT_PATH "${CMAKE_SOURCE_DIR}/../third-party/local/lib")
else()
    set(THIRD_PARTY_PATH "${CMAKE_SOURCE_DIR}/../third-party")
    set(HAKO_INC_DIR "${THIRD_PARTY_PATH}/hakoniwa-core-cpp-client/src/include")
    set(CMAKE_FIND_ROOT_PATH /usr/local/lib)
endif()

if (DEFINED HAKO_CLIENT_OPTION_FILEPATH)
    include(${HAKO_CLIENT_OPTION_FILEPATH})
else()
    include(default-cmake-options.cmake)
endif()

if(WIN32)
    find_library(ZENOH_C_LIBRARY NAMES zenohc NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/zenoh-c)
    find_library(HAKO_ASSETS_LIBRARY NAMES assets NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/hakoniwa)
    find_library(HAKO_C_LIBRARY NAMES hakoc NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/hakoniwa)
    find_library(HAKO_LIBRARY NAMES hako NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/hakoniwa)
    find_library(HAKO_SHAKOC_LIBRARY NAMES shakoc NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/hakoniwa)
    find_library(HAKO_CONDUCTOR_C_LIBRARY NAMES conductor NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/hakoniwa)
else()
    find_library(ZENOH_C_LIBRARY NAMES zenohc NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH})
    find_library(HAKO_C_LIBRARY NAMES assets NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/hakoniwa)
    find_library(HAKO_CONDUCTOR_C_LIBRARY NAMES conductor NO_DEFAULT_PATH HINTS ${CMAKE_FIND_ROOT_PATH}/hakoniwa)
endif()

message(STATUS "ZENOH_C_LIBRARY_PATH: " ${ZENOH_C_LIBRARY})
message(STATUS "HAKO_C_LIBRARY: " ${HAKO_C_LIBRARY})
message(STATUS "HAKO_CONDUCTOR_C_LIBRARY: " ${HAKO_CONDUCTOR_C_LIBRARY})
if(WIN32)
    message(STATUS "HAKO_ASSETS_LIBRARY: " ${HAKO_ASSETS_LIBRARY})
    message(STATUS "HAKO_SHAKOC_LIBRARY: " ${HAKO_SHAKOC_LIBRARY})
    message(STATUS "HAKO_LIBRARY: " ${HAKO_LIBRARY})
    message(STATUS "HAKO_INC_DIR: " ${HAKO_INC_DIR})
    message(STATUS "ZENOH_C__INC_DIR: " ${ZENOH_INC_DIR})
endif()

add_subdirectory(shm-proxy)
